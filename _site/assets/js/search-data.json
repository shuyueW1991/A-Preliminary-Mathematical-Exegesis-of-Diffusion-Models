{"0": {
    "doc": "Chapter 0 - Preface",
    "title": "Chapter 0 - Preface",
    "content": "Chapter 0 - Preface Generative AI has transformed countless aspects of our world. Among its many techniques, the diffusion model stands out as a groundbreaking framework—powering innovations like Stable Diffusion, whose magic captivates anyone (myself included) who remembers a time before the AI revolution. Yet, for all its dazzling applications, the inner workings of diffusion models often elude clear understanding. For learners like me, most tutorials and code snippets in blogs and papers provide only fragmented insights—forcing us to piece together scattered, incomplete explanations. Even seemingly thorough articles often rest on shallow foundations—skimming over core principles, whether from hurried exposition or an unspoken assumption that they’re ‘obvious.’ Sometimes, relentless onslaught of mathematical tricks can leave you nodding along—”Sure, I follow”—only to later wonder, “But what does this actually mean to do?” Over time, these unresolved questions pile up, until the aspiring learners simply walk away. I understand the frustration all too well. The fundamental idea behind diffusion models is rarely stated outright in most tutorials: like all generative AI, diffusion models attempt to aim to replicate what the nature offers—most often, images—in our own way. As for the term “diffusion”, it derives from a specific component of its underlying mechanism, which will be examined in detail in Chapter III of this booklet. Prior to delving into its technical foundations, we first establish the overarching objective shared by all generative AI paradigms: the development of models capable of synthesizing natural images. As the discussion progresses, the distinctive characteristics inherent to diffusion models will emerge. While preparing for a lecture on diffusion model and their SOTA technology at Emzan Technology Co. for their department of autoslide.cc, I realized something: many of us needs a booklet on diffusion models that is mathematically rigorous yet accessible, one that strips away the noise and delivers the true, deep intuition behind the framework. This booklet is my attempt to share what I’ve learned about diffusion models—both the math behind them and how they’ve evolved via logic. I’ve tried to write it like something where ideas build naturally. The math is precise by my best, but I hope it feels more like following a story than reading a textbook. I’ve structured this booklet to guide readers naturally through diffusion models, like following a current. You won’t find rigid sections or numbered references because the focus isn’t on compartmentalized facts—it’s on how the ideas connect. Nothing’s introduced without context, and no idea exists just for show. I will slow down where I once struggled, so the readers might have an easier time. The booklet’s theoretical progression relies on a few carefully chosen deus ex machina elements—unavoidable but kept to a minimum. The term deus ex machina (Latin for “god from the machine”) originates from ancient Greek theater, where an external intervention abruptly resolved a tangled plot. In this context, it refers to key assumptions or mathematical tools that enable deductions which might otherwise seem unmotivated. Each such device will be explicitly introduced and justified: . | The use of Chebyshev inequality to bound the dot product between high-dimensional data. | The introduction of latent variables (denoted as z) as a modeling construct. | The use of KL divergence to measure distributional distances, along with its mathematical properties and role in derivations. | The Itô SDE and Fokker-Planck equation that evolves the sampled data distribution in the long run. | Central Limit Theorem, that provides a mathematically convincing path to the beautiful Gaussian distribution. | . By making these deliberate concessions explicit, the booklet ensures readers aren’t left puzzling over sudden leaps in reasoning. The booklet is divided into four chapters: . | Chapter I dismantles the seemingly simple mantra “maximize p(x)”—an idea so deceptively complex that it demands an entire chapter. | Chapter II offers a clear, concise derivation of the ELBO. | Chapter III unlocks the soul of diffusion model, i.e. the perspective of distribution transition that brings score into the game. | Chapter IV immediately implements mathematics into a robust, actionable practice. | . As you explore this booklet, I hope you’ll feel the deep satisfaction of genuine intellectual engagement. I’ve written this with our community of practitioners in mind: learners who crave not just theoretical clarity, but practical mastery. Every page is designed to equip you with knowledge that’s both immediately useful in your work and foundational to advancing our collective grasp of this field. By the end, I hope you’ll grasp diffusion models so intuitively that you could explain them in your own words—not because you memorized the text, but because the ideas truly clicked. If I’ve done my job right, these concepts won’t feel like borrowed knowledge; they’ll feel like yours. At Бишкек, Кыргызстан . June, 2025 . ",
    "url": "/A-Preliminary-Mathematical-Exegesis-of-Diffusion-Models/00-chpt0.html",
    
    "relUrl": "/00-chpt0.html"
  },"1": {
    "doc": "Chapter 1 - The High-Dimensional Structure of True Data",
    "title": "Chapter 1 - The High-Dimensional Structure of True Data",
    "content": "Chapter 1 - The High-Dimensional Structure of True Data . We kickstart our exegesis by reiterating the fundamental objective of diffusion models claimed in the preface—To replicate what the nature offers, mostly in image generation. Consider a photograph taken from Shangrī-La, a hand-drawn portrait in the Musée du Louvre, or plants documented in Amazonía —each constitutes a manifestation of nature’s visual repertoire. We formally designate such representations as natural images. It is not difficult to understand, though, that being ‘natural’ for images is not the same with ‘real’. A “real” image is bound by the constraints of physical reality, whereas a “natural” image may include artistic interpretations, stylized elements, or even idealized forms that still feel intuitively coherent. For instance, an impressionist painting or a dreamlike digital rendering can qualify as natural despite departing from strict realism. Diffusion models, therefore, aim not just for photorealism but for the broader fidelity to natural visual grammar—the interplay of light, form, and texture that defines recognizability. This subtle distinction underscores their flexibility in generating both lifelike and creatively altered outputs while remaining anchored in naturalistic principles. In each of the above visual case, the visual input can be represented as a tensor—for instance, a \\(256 \\times 256\\) image admits \\({2^8}^3 = 16,777,216\\) possible colors per pixel (where 3 represents 3 RGB channels and 8 refers to the bit depth of the channel), and the total configuration space for pixel combinations therefore contains \\((16,777,216)^{256 \\times 256}\\) distinct images—a vast number that exceeds the estimated \\(10^{80}\\) atoms in the observable universe. If we randomly assign values to each pixel, the result will be more likely to appear chaotic than to be ‘natural’, almost certainly degrading into meaningless noise. This can be empirically verified by generating random arrays (e.g., via numpy.random.rand()in python) and visualizing them using any standard image display tool. Such a disordered array of uncorrelated hues would diverge sharply from the characteristics of a typical natural image. This is because natural images exhibit a structured harmony, where pixels organize into coherent objects, textures, and spatial relationships—manifesting as edges, discernible shapes, and smooth luminance gradients. While mathematically valid as tensors, these random permutations are exploiting the full combinatorial space without yielding meaningful representation. In fact, only a vanishingly small fraction of these possible configurations correspond to meaningful images. The sparsity of meaningful images might suggest Gaussian distributions as potential models, given their prevalence in other domains. However, Gaussian approximations fail dramatically for natural images. When fitted to image data through mean and covariance, sampling yields only blurry, unrealistic outputs if using Gaussian approximations. You can also try it by yourself. The mean can be an indistinct average (like an “average face”), while the covariance captures merely pairwise pixel relationships. This failure illustrates a deeper truth: semantics has finer structure than simple enumerations. These fundamental inadequacies necessitate more sophisticated approaches—such as diffusion models—capable of capturing the intricate structures inherent in natural images. Since arbitrary pixel arrangements rarely yield realistic outputs, we turn to probability theory for a solution, because real natural images follow certain patterns (e.g., smooth textures, recognizable objects), we can model distribution that registers those patterns statistically rather than relying on randomness. Here, each natural image can be viewed as a sampled event from an underlying probability distribution over all possible pixel configurations. In probability theory, an event represents a possible outcome of an experiment or observation. It is denoted by \\(x\\), which may be either a scalar in one dimension or a tensor in multiple dimensions. When considering images, \\(x\\) typically represents either meaningful natural images or random arrangements of pixels. The probability \\(p(x)\\) then quantifies the likelihood of event \\(x\\) occurring. It calculates the likelihood of observing a specific natural image among all possible pixel configurations. In this framework, every natural image thus represents a sample drawn from an underlying probability distribution governing all possible pixel configurations. A good \\(p(x)\\) should approach zero for random noise while assigning higher probability density to natural images. With this foundation, our focus will now shift entirely to modeling the true data distribution \\(p_{data}(x)\\), the underlying probability structure governing natural images. For practitioners seeking to leverage generative AI—whether to develop custom models or satisfy theoretical curiosity—understanding this distribution’s properties proves essential. Now let’s take a look at the high-dimensional tensor of noise with \\(d\\) pixels, each being independent with identically distributed (i.e. i.i.d.) components.: . \\[X=(X_1,X_2,…,X_d)\\] We suppose \\(X_i\\) has finite variance \\(\\sigma^2\\). Since: . \\[∥X∥_2^2=\\sum_{i=1}^dX_i^2\\] we have  . \\[\\mathbb{E}[\\|X\\|_2^2]=d\\cdot\\mathbb{E}[X_i^2]\\] and . \\[Var(\\|X\\|_2^2)=d⋅Var(X_i^2).\\] We calculate the ratio between the standard deviation and the mean, and we refer to this ratio as concentration ratio: . \\[\\frac{\\sqrt{Var(∥X∥_2^2)}}{E[∥X∥_2^2]}=\\frac{\\sqrt{d⋅Var(X_i^2)}}{d⋅E[X_i^2]} \\propto \\frac{1}{\\sqrt{d}}→0\\quad\\text{as }d \\rightarrow \\infty.\\] This vanishing result implies the concentration around the mean, which you can imagine a thin shell of noises shows itself gathering the sample when the dimension increases. We now illustrate this concentrated norm phenomenon for high-dimensional noise in uniform and gaussian distributions, respectively — . For \\(X_i \\sim \\text{Uniform}(-a,a)\\)，its probability density function is . \\[f_{X_i}(x) = \\frac{1}{2a}.\\] The variance is: . \\[\\begin{align*} \\text{Var}(X_i^2) &amp;= \\mathbb{E}[X_i^4] - (\\mathbb{E}[X_i^2])^2 \\\\ &amp;= \\left( \\int_{-a}^a x^4 \\cdot \\frac{1}{2a} \\, dx \\right) - \\left( \\int_{-a}^a x^2 \\cdot \\frac{1}{2a} \\, dx \\right)^2 \\\\ &amp;= \\left( \\frac{1}{2a} \\left[ \\frac{x^5}{5} \\right]_{-a}^a \\right) - \\left( \\frac{1}{2a} \\left[ \\frac{x^3}{3} \\right]_{-a}^a \\right)^2 \\\\ &amp;= \\frac{a^4}{5} - \\left( \\frac{a^2}{3} \\right)^2 \\\\ &amp;= \\frac{4a^4}{45} \\end{align*}\\] For \\(X = (X_1, \\dots, X_d)\\), we have: . \\[\\mathbb{E}[\\|X\\|_2^2] = d \\cdot \\mathbb{E}[X_i^2] = d \\cdot \\frac{a^2}{3},\\] so . \\[\\|X\\|_2 \\approx \\sqrt{\\mathbb{E}[\\|X\\|_2^2]} = a \\sqrt{\\frac{d}{3}}.\\] Also, we have: . \\[\\text{Var}(\\|X\\|_2^2) = d \\cdot \\text{Var}(X_i^2) = d \\cdot \\frac{4a^4}{45},\\] so . \\[\\sigma_{\\|X\\|_2^2} = \\frac{2a^2 \\sqrt{d}}{\\sqrt{45}} = \\frac{2a^2 \\sqrt{d}}{3 \\sqrt{5}}.\\] Then we now have the concentration ratio vanishing in the uniform distribution: . \\[\\frac{\\sigma_{\\|X\\|_2^2}}{\\mathbb{E}[\\|X\\|_2^2]} = \\frac{2a^2 \\sqrt{d} / (3 \\sqrt{5})}{d a^2 / 3} = \\frac{2}{\\sqrt{5d}}\\to 0\\text{ as }d \\to \\infty.\\] For \\(X_i \\sim \\mathcal{N}(0, \\sigma^2)\\), its probability density function is: . \\[f_{X_i}(x) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} e^{-\\frac{x^2}{2\\sigma^2}}.\\] The variance of \\(X_i^2\\): . \\[\\begin{align*} \\text{Var}(X_i^2) &amp;= \\mathbb{E}[X_i^4] - \\left(\\mathbb{E}[X_i^2]\\right)^2 \\\\ &amp;= \\left( \\int_{-\\infty}^{\\infty} x^4 f_{X_i}(x) \\, dx \\right) - \\left( \\int_{-\\infty}^{\\infty} x^2 f_{X_i}(x) \\, dx \\right)^2 \\\\ &amp;= \\left( \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\int_{-\\infty}^{\\infty} x^4 e^{-\\frac{x^2}{2\\sigma^2}} \\, dx \\right) - \\left( \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\int_{-\\infty}^{\\infty} x^2 e^{-\\frac{x^2}{2\\sigma^2}} \\, dx \\right)^2 \\\\ &amp;= \\left( \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\cdot 3\\sqrt{2\\pi}\\sigma^5 \\right) - \\left( \\frac{1}{\\sqrt{2\\pi\\sigma^2}} \\cdot \\sqrt{2\\pi}\\sigma^3 \\right)^2 \\\\ &amp;= 3\\sigma^4 - (\\sigma^2)^2 \\\\ &amp;= 2\\sigma^4 \\end{align*}\\] For \\(X = (X_1, \\dots, X_d)\\), we have: . \\[\\mathbb{E}[\\|X\\|_2^2] = d \\cdot \\mathbb{E}[X_i^2] = d \\sigma^2,\\] so . \\[\\|X\\|_2 \\approx \\sqrt{\\mathbb{E}[\\|X\\|_2^2]} = \\sigma \\sqrt{d}.\\] And we have . \\[\\text{Var}(\\|X\\|_2^2) = d \\cdot \\text{Var}(X_i^2) = 2d \\sigma^4,\\] so . \\[\\sigma_{\\|X\\|_2^2} = \\sigma^2 \\sqrt{2d}.\\] Then the concentration ratio in the gaussian distribution becomes: . \\[\\frac{\\sigma_{\\|X\\|_2^2}}{\\mathbb{E}[\\|X\\|_2^2]} = \\frac{\\sigma^2 \\sqrt{2d}}{d \\sigma^2} = \\sqrt{\\frac{2}{d}} \\to 0 \\text{ as } d \\to \\infty.\\] Now let’s check upon the relationship between the noises inside the shell. Consider two random noises \\(\\mathbf{u}, \\mathbf{v} \\in \\mathbb{R}^d\\) , with i.i.d. entries , each has finite variances and bounded fourth moments: . \\[\\text{Var}(u_i) = \\sigma_u^2, \\text{Var}(v_i) = \\sigma_v^2 &lt; \\infty,\\text{and } \\mathbb{E}[u_i^4], \\mathbb{E}[v_i^4] &lt; \\infty\\] The dot product is . \\[\\langle \\mathbf{u}, \\mathbf{v} \\rangle \\triangleq \\sum_{i=1}^d u_i v_i\\] has expectation: . \\[\\mathbb{E}[\\langle \\mathbf{u}, \\mathbf{v} \\rangle] = \\sum^d_{i=1}\\mathbb{E}[u_iv_i] = \\sum^d_{i=1}\\mathbb{E}[u_i]\\mathbb{E}[v_i] = d \\mu_u \\mu_v.\\] The split of expectation comes from i.i.d. features. Its variance is: . \\[\\text{Var}(u_i v_i) = \\mathbb{E}[u_i^2 v_i^2] - (\\mathbb{E}[u_i v_i])^2 = (\\sigma_u^2 + \\mu_u^2)(\\sigma_v^2 + \\mu_v^2) - \\mu_u^2 \\mu_v^2=\\sigma^2​_u\\sigma_v^2​+\\sigma^2​_v\\mu_u^2​+\\sigma^2​_u\\mu_v^2​.\\] Here comes the first deux ex machina of the booklet: . The Chebyshev inequality provides a bound on the probability that a random variable \\(X\\) deviates from its mean \\(\\mu\\) by more than \\(k\\) standard deviations \\(\\sigma\\), stating that \\(\\Pr(|X - \\mu| \\geq k\\sigma) \\leq \\frac{1}{k^2}\\) for any \\(k &gt; 0\\). This universal bound applies to any distribution with finite variance, offering a measure of dispersion guarantees. Back to our case, for \\(\\epsilon &gt; 0\\): . \\[\\mathbb{P}\\left( \\left| \\frac{\\langle \\mathbf{u}, \\mathbf{v} \\rangle}{d} - \\mu_u \\mu_v \\right| \\geq \\epsilon \\right) \\leq \\frac{\\text{Var}(\\langle \\mathbf{u}, \\mathbf{v} \\rangle)}{d^2 \\epsilon^2} = \\frac{d\\cdot (\\sigma^2​_u\\sigma_v^2​+\\sigma^2​_v\\mu_u^2​+\\sigma^2​_u\\mu_v^2)}{d^2 \\epsilon^2} \\to 0 \\text{ as } d \\to \\infty.\\] Thus, equivalently: . \\[\\frac{\\langle \\mathbf{u}, \\mathbf{v} \\rangle}{d} \\to \\mu_u \\mu_v.\\] The squared norm of \\(\\mathbf{u}\\) is: . \\[\\|\\mathbf{u}\\|^2 = \\sum_{i=1}^d u_i^2.\\] So, compute the expected value: . \\[\\mathbb{E}\\left[\\frac{\\|\\mathbf{u}\\|^2}{d}\\right] = \\frac{1}{d} \\sum_{i=1}^d \\mathbb{E}[u_i^2].\\] Since . \\[\\mathbb{E}[u_i^2] = \\text{Var}(u_i) + (\\mathbb{E}[u_i])^2 = \\sigma_u^2 + \\mu_u^2,\\] we have: . \\[\\mathbb{E}\\left[\\frac{\\|\\mathbf{u}\\|^2}{d}\\right] =\\frac{d\\cdot(\\sigma_u^2 + \\mu_u^2)}{d}= \\sigma_u^2 + \\mu_u^2.\\] Then, similar to the use of the Chebyshev inequality, the squared norms concentrate as: . \\[\\frac{\\|\\mathbf{u}\\|^2}{d} \\to \\sigma_u^2 + \\mu_u^2, \\quad \\frac{\\|\\mathbf{v}\\|^2}{d} \\to \\sigma_v^2 + \\mu_v^2.\\] The normalized dot product thus satisfies: . \\[\\frac{\\langle \\mathbf{u}, \\mathbf{v} \\rangle}{\\|\\mathbf{u}\\| \\|\\mathbf{v}\\|} = \\frac{\\langle \\mathbf{u}, \\mathbf{v} \\rangle / d}{\\sqrt{(\\|\\mathbf{u}\\|^2 / d)(\\|\\mathbf{v}\\|^2 / d)}} \\to \\frac{\\mu_u \\mu_v}{\\sqrt{(\\sigma_u^2 + \\mu_u^2)(\\sigma_v^2 + \\mu_v^2)}}.\\] From the definniton of inner vectorial product, if \\(\\mu_u \\mu_v = 0\\) (i.e. at least one mean is zero), there is orthogonality between noises within the shell. That is to say, for zero-mean random vectors in high dimensions, if the distribution to sample is zero-meaned, the sampled vectors are likely to be orthogonal to each other. Under this circumstance, the directions of noise vectors remain uniformly distributed over the sphere, which is quite unusual in low-dimensional space. For a more intuitive grasp of high-dimensional noise , let’s check how a perturbation added to a high-dimensional tensor would be like. Consider a random noise vector \\(\\boldsymbol{\\epsilon} \\in \\mathbb{R}^d\\), where each component \\(\\epsilon_i\\) is sampled i.i.d. from a distribution with mean \\(0\\) and variance \\(\\sigma^2\\). By Chebyshev’s inequality, the normalized squared norm \\(|\\boldsymbol{\\epsilon}|_2^2/d\\) concentrates around \\(\\sigma^2\\): . \\[\\Pr\\left(\\left|\\frac{\\|\\boldsymbol{\\epsilon}\\|_2^2}{d} - \\sigma^2\\right| \\geq \\delta\\right) \\leq \\frac{\\text{Var}(\\epsilon_i^2)}{d\\delta^2},\\] implying \\(|\\boldsymbol{\\epsilon}|_2 \\approx \\sigma\\sqrt{d}\\) for large \\(d\\). It means that even small noise (\\(\\sigma\\)) becomes significant in high dimensions, causing large prediction changes. For example, a linear model \\(f(\\mathbf{x}) = \\mathbf{w}^T \\mathbf{x}\\), the perturbation’s impact scales as \\(|\\mathbf{w}^T \\boldsymbol{\\epsilon}| \\leq |\\mathbf{w}|_2 \\sigma \\sqrt{d}\\). In the context of images, small perturbations to pixel values can induce large changes in model predictions. For a given portrait, it takes not much of effort to make it not portrait-like any more by perturbing the pixels. The quasi-orthogonality of high-dimensional noise vectors and the concentration of their norms play crucial roles in diffusion models. These properties ensure efficient exploration of the data space during the forward process and stable reconstruction during denoising. Like a well-calibrated search algorithm, they enable the model to systematically perturb and smear entirely the high-dimensional space. We will analyze these in detail in later chapters. Our analysis of high-dimensional data naturally leads to the question: what distinguishes natural images within this space that is mostly occupied by noise? We take a look at their norms, first. Consider a \\(32 \\times 32\\) grayscale image, representing a vector in \\(\\mathbb{R}^{1024}\\) space (\\(d = 32 \\times 32 = 1024\\)). Let \\(\\mathbf{x} \\in \\mathbb{R}^d\\) denote the image and \\(\\boldsymbol{\\epsilon} \\in \\mathbb{R}^d\\) represent standard normal noise (\\(\\epsilon_i \\sim \\mathcal{N}(0, 1)\\)). The expected squared \\(L_2\\) norm of the noise is: . \\[\\mathbb{E}[\\|\\boldsymbol{\\epsilon}\\|_2^2] = \\sum^d_{i}\\mathbb{E}[\\|\\epsilon_i\\|_2^2] = d \\cdot \\sigma^2 = 1024 \\cdot 1 = 1024\\] which yields a typical noise magnitude of \\(|\\boldsymbol{\\epsilon}|_2 \\approx \\sqrt{1024} = 32\\). In contrast, studies have found that the average squared \\(L2\\)​ norm of CIFAR-10 images (after normalization) is roughly 200, yielding a typical norm of \\(\\sqrt{200}\\sim14.14\\), significantly smaller than that of a random noise. We find that natural images exhibit smaller norms compared to random noise with independent and identically distributed (i.i.d.) entries. Three key factors explain this phenomenon mathematically. First, natural images exhibit piecewise smoothness: they consist of regions with slowly varying pixel values (like smooth surfaces or uniform areas) separated by abrupt transitions (edges). Since edges occupy relatively few pixels, their contribution to the overall norm is minimal compared to smooth regions. Second, the presence of sharp edges creates heavy-tailed distributions. Unlike Gaussian distributions, natural images show higher probability mass in extreme values due to frequent abrupt transitions between regions. Third, the abundance of near-zero pixel values (from dark areas or low-intensity regions) further reduces the overall norm. Approximately 50% of pixels in natural images often fall into this category. This norm discrepancy demonstrates that natural images cannot be modeled as random high-dimensional vectors with i.i.d. components. Correlations indicated by smooth edges, textures, and objects imply that the data is not filling the high-dimensional space uniformly but instead concentrates near a lower-dimensional structure. Another perspective to understand this is through entropy. Entropy measures the average uncertainty (or information content) of event \\(X\\), where higher entropy means more randomness that makes compression harder, and lower entropy means more predictability that makes allowing better compression. Regarding flipping a coin, a fair coin (50% heads, 50% tails) should have maximum entropy because you’re completely uncertain about the outcome, while a biased coin (e.g., 99% heads) should have lower entropy, because you’re more confident it’ll land heads. A higher entropy should bring more surprise. In this spirit, Shannon’s entropy is thus defined: for a discrete random variable \\(X\\) with possible outcomes \\(x_i\\) and probabilities \\(p_i\\)​: . \\[H(X)=− \\sum_{i} ​p_i(X)​ \\log p_i(X)\\] For an image \\(X\\) with pixel  \\(x_i\\in{0,1,…,255}\\) as channel value, the entropy per pixel is: . \\[H_{noise}=-\\sum_{i=0}^{255}p(x_i)\\log_2p(x_i)\\] We consider random noise as uniformly distributed, then its entropy is . \\[-\\sum_{i=0}^{255}\\frac{1}{256}\\log_2\\frac{1}{256}=\\log⁡_2 256=8 \\text{bits/pixel}.\\] Knowing this, we now look at the joint entropy \\(H(X,Y)\\) that measures the total uncertainty of the pair \\((X,Y)\\): . \\[H(X,Y) = -\\sum_{x \\in \\mathcal{X}} \\sum_{y \\in \\mathcal{Y}} P(x,y) \\log_2 P(x,y),\\] where \\(P(x,y)\\) is the joint probability of \\(X = x\\) and \\(Y = y\\). When \\(X\\) and \\(Y\\) are independent, the joint probability factorizes: . \\[P(x,y) = P(x)P(y).\\] Substituting into the joint entropy formula: . \\[H(X,Y) = -\\sum_{x} \\sum_{y} P(x)P(y) \\log_2 \\left[ P(x)P(y) \\right]= -\\sum_{x} \\sum_{y} P(x)P(y) \\left[ \\log_2 P(x) + \\log_2 P(y) \\right].\\] Splitting the sum into: . \\[-\\sum_{x} P(x) \\log_2 P(x) \\sum_{y} P(y) = H(X)\\] and . \\[-\\sum_{y} P(y) \\log_2 P(y) \\sum_{x} P(x) = H(Y).\\] Thus: . \\[H(X,Y) = H(X) + H(Y).\\] So, for an \\(n\\times n\\) image with \\(n^2\\) pixels, if pixel values are independent, then the total entropy is additive: . \\[H_{total}=n^2\\times H=n^2\\times 8 \\text{bits}.\\] Natural images have much lower entropy than random noise images, meaning they occupy an exponentially smaller fraction of the space of all possible pixel combinations. This is also concluded from empirical studies. Due to correlations, natural images have much lower entropy. An image of a face is determined by lighting, pose, and identity, not pixel-by-pixel independently. Therefore, due to strong statistical dependencies, their effective entropy is significantly lower than their nominal dimensionality would suggest. This reduction in entropy implies that natural images possess far fewer degrees of freedom than independent pixel sampling would permit. Natural images do not fill their high-dimensional pixel space uniformly; instead, they reside in an exponentially sparse subset. On one hand, natural images are highly structured, more complex than a random noise. And they have smaller norms compared with a random noise. On the other hand, we have known that natural images are vanishingly rare in the space of all possible pixel combinations. Randomly sampling from all possible \\(256\\times256\\) RGB images gives you almost 0 probability of getting a natural image.   But if you sample from real-world camera outputs, the 0 probability goes to the meaningless noise, It does no harm to imagine that maybe, natural images dominate the probability mass of the true data distribution \\(p_{data}(x)\\) i.e. it is highly peaked around natural images. Thus, while natural images may be rare in the global view of high-dimensional space, they dominate within certain localized regions. This structure is formally referred to as a manifold (\\(\\mathcal{M}\\)) in the machine learning community—a low-dimensional geometric object embedded within a high-dimensional space. A useful analogy is a two-dimensional sheet of paper floating in three-dimensional space. Globally, the paper occupies no volume—it is infinitely thin—yet every point on its surface lies precisely within its own two-dimensional plane. Similarly, natural images, though sparse in the full pixel space, concentrate on much lower-dimensional manifolds where their intrinsic structure resides. Mathematically speaking, in the space of all possible images, the set of natural images has extremely small volume but very high density \\(p_{data}(x)\\) for \\(x\\in M\\). The rest of the space (noise, random pixels) has enormous volume but near-zero density \\(p_{data}(x)\\approx 0\\). Sampling from \\(p_{data}\\)​ thus almost always gives natural images. When generating new images, there might be chances of wandering into low-probability regions. However, if your model \\(p(x)\\) is good enough, sampling from it correctly will almost always give natural images, because in a well-trained p(x), almost all the probability mass is concentrated around the natural image manifold. Note that Probability mass ≠ size of set: This is the key insight! The size of a set (e.g., natural images vs. noise) is not the same as its probability mass. Probability mass depends on the distribution \\(p(x)\\). If you randomly sample pixels (uniformly), you’ll almost always get noisy garbage. but if you cast a regard to real world, you rarely see random noise. Therefore, a well-learned generative model should resemble this true data distribution where the high-density regions should correspond to natural images, and the low-density regions should correspond to noise or unrealistic images. They shrink the sampling space to near \\(\\mathcal{M}\\), making natural images likely outputs. If we would like to realize such a modeled distribution, we can use a suitable model family chosen as \\(p_\\theta(x)\\), with unknown parameters \\(\\theta\\), so that the problem boils down to maximizing the average (log-)likelihood (w.r.t \\(\\theta\\)) of all the samples under the model . \\[\\theta^* = \\arg \\max_\\theta \\mathbb{E}_{x \\sim q_{\\text{data}}(x)} [\\log p_\\theta(x)] \\approx \\arg \\max_\\theta \\frac{1}{N} \\sum_{n=1}^N \\log p_\\theta(x^{(n)})\\] where defining an arbitrary parametric density \\(p_\\theta(x)\\) is not as easy as it looks. There was one aspect of \\(p_\\theta\\) that is widely considered to be the evil behind this difficulty – the normalizing constant that stems from the axiom of probability . \\[p_\\theta(x) = \\frac{\\tilde{p}_\\theta(x)}{\\int_x \\tilde{p}_\\theta(x)}\\] A smart solution to this would be brought up in chapters to follow. In summary, in the space of all pixel combination, even though natural images are a tiny subset of all possible images, they carry almost all the probability mass in \\(p(x)\\). This is the benefit of getting a modeled distribution that is close to true distribution. Equivalently, the closer a modeled distribution to the true distribution, the more probability of observed data getting sampled. The problem of generative modeling can be posed as parametric density estimation using a finite set of observed samples \\({x^{(n)}}^N_{n=1}\\) from a true but unknown data distribution \\(p_{true}(x)\\). The observed data \\(x\\) are observed because there is a true distribution out there, and the data point represented by the observed data occupies most of the probability mass of the true distribution. There should be a value measuring the probability of observing those \\(x\\). ",
    "url": "/A-Preliminary-Mathematical-Exegesis-of-Diffusion-Models/01-chpt1.html",
    
    "relUrl": "/01-chpt1.html"
  },"2": {
    "doc": "Chapter 2 - The ELBO Paradigm --- Proxy Objective for True Data Maximization",
    "title": "Chapter 2 - The ELBO Paradigm --- Proxy Objective for True Data Maximization",
    "content": "Chapter 2 - The ELBO Paradigm --- Proxy Objective for True Data Maximization . In previous chapter, we have talked about finding the best modeled distribution via evaluating the likelihood \\(p(x)\\)  of observed or generated data, because that measures how well they explain the observation: higher likelihood suggests a better model. Question now is: how to maximize the \\(p(x)\\), i.e. optimize \\(p(x)\\) to achieve maximal likelihood? . In this chapter, to get this game going, we will introduce two deus ex machina magics. The first one in this chapter is the latent variables, denoted as \\(z\\). The incorporation of latent variables in generative models represents a powerful paradigm grounded in critical insights about data structure. Real-world datasets often exhibit complex dependencies of underlying, unobserved factors. For instance, image data contains implicit attributes like illumination geometry and object orientation that are not explicitly encoded in pixel values but significantly influence the observed patterns. By explicitly representing these hidden factors, latent variables enable models to capture richer data structure. Without latent variables, we would face the formidable challenge of modeling complex high-dimensional distributions directly - such as capturing intricate pixel-level correlations in images - which is both computationally intractable and statistically inefficient. Latent variables decompose the problem into more manageable components: a simple latent space distribution \\(p(z)\\) and a conditional data distribution \\(p(x|z)\\), where \\(z\\) represents the latent factors and \\(x\\) the observed data. This framework offers a structured, interpretable, and scalable approach—transforming an intractable problem into one where hidden factors systematically explain observed phenomena. In fact, the metaphor of Plato’s Cave—from The Republic—provides a powerful analogy for understanding latent variables in generative models. In Plato’s allegory, prisoners are chained in a cave, seeing only shadows cast on a wall by objects they cannot directly observe. This mirrors the relationship between observed data and latent variables. The shadows are like our raw data (e.g., pixel values in images), mere surface-level projections. The true forms are the latent variables—the unobserved, higher-dimensional factors (e.g., lighting, pose, or semantic meaning) that generate the data, just as the objects outside the cave cast the shadows. In both cases, reality is richer than what we directly perceive. Latent variables act as the hidden causes behind the observable effects, allowing models to infer the underlying structure that shapes the data. We now try maximizing \\(p(x)\\) by utilizing latents \\(z\\). We’re here to find the distribution in which the observed data \\(x_1, x_2, …, x_n\\) would be highest in probability compared with other distributions. In modeling terms, this translates to finding a configuration of model parameters  such that the observed data have the highest probability compared with other configuration. Keep in mind that it has never been a problem of probability value arithmetic, as is suggested by its denotation format; it is a distribution (i.e. the best \\(p\\), in whichever form it takes, that we are actually looking for). One way of linking latents \\(z\\) to \\(p(x)\\) is to think about: . \\[p(x)=\\int{p_\\theta(x,z)dz}=\\int{p_\\theta(x|z)p(z)dz}\\] where \\(p_\\theta(x,z)\\) refers to a new modeled (indicated by \\(_\\theta\\)) probability distribution (indicated by \\(p\\)) with new set of params (indicated by \\(x,z\\) ). The decomposition of integrand is directly from the chain of rule in probability. \\(p(x|z)\\), a.k.a. decoder, describes how observations \\(x\\) are generated from latents \\(z\\); and \\(p(z|x)\\), a.k.a. encoder, describes how latents can be inferred from observations. Note that the equation holds regardless of whether \\(x\\) and \\(z\\) are independent: independence would imply \\(p(x,z)=p(x)p(z)\\), but this is not necessary for the marginalization to be valid. With this, one might propose the procedures of estimate \\(p(x\\)): . | sample  \\(z\\) from \\(p(z)\\) | for a given \\(\\theta\\), calculate \\(p_\\theta(x|z)\\) , i.e. the probability of observing the data \\(x\\) we have observed given a sampled \\(z\\). | do this with sufficient times of \\(z\\) sampling, thus get to compute the integral. | Therefore, by adjusting the model param \\(\\theta\\), the integral gets bigger or smaller correspondingly, until the \\(\\theta\\) corresponds to one high value of \\(p(x)\\) is found. | . However, the intractability of the integration a major challenge itself. \\(z\\) is typically a high-dimensional vector. The integral is over all possible values of \\(z\\), which is computationally infeasible for even moderate size. Example: if \\(z\\) has 100 dimensions and we discretize each dimension into just 10 values, the number of terms in the sum grows as much as \\(10^{100}\\). The decoder \\(p_\\theta(x|z)\\) , like other mathematical things in machine learning that is beyond explicit expression, is usually modeled by a neural network. To such a complex nonlinear function, there’s no analytical formula for integrating it over \\(z\\), even if \\(p(z)\\) is as simple as Gaussian. Suppose we repeat $N$ times to yield the approximation: . \\[p_{\\boldsymbol{\\theta}}(x) = \\int p_{\\theta}(x|z)p(z)dz \\approx \\frac{1}{N}\\sum_{i=1}^N p_{\\theta}(x|z^{(i)})\\] This approximation converges to the true expectation as $N \\to \\infty$ by the law of large numbers. We optimize parameters $\\theta$ to maximize $p_{\\theta}(x)$, thereby improving the model’s fit to the observed data while maintaining the learned low-dimensional structure. However, it takes very large number to await the valid $N$ to come. In addition, most \\(z\\) samples obtained in this approach will contribute negligibly to \\(p_\\theta(x)\\), since \\(p(z)\\) is uninformed about \\(x\\), so most \\(z\\) values will lead to \\(p_\\theta(x∣z)≈0\\), just consider how much naturalimages occupies the whole space. Blindly sampling  \\(z \\sim p(z)\\) provides little guidance to the decoder about which regions of \\(z\\)-space are relevant for generating meaningful \\(x\\). A second approach of linking latents \\(z\\) to \\(p(x)\\) is through chain rule of probability: . \\[p(x)=\\frac{p(x,z)}{p(z|x)}\\] Since the latents \\(z\\) are in both numerator and denominators, no direct observations can be made. Given our goal is to maximize \\(p(x)\\), we’re here faced with the problem of maximizing two unknown functions distributions simultaneously. The denominator can be modeled as encoder network, and it can be denoted as \\(p_\\phi(z|x)\\). It is quite instinctive to imagine a mapping from observed data \\(x\\) towards latents \\(z\\). But in many literature, the \\(p_\\phi(z|x)\\) here is written as \\(q_\\phi(z|x)\\), a notation that emphasizes it’s an approximation of the true posterior \\(p(z|x)\\). Modeling the numerator  \\(p_\\theta(x,z)\\) might seem conceptually straightforward: we could simply introduce another parameterized distribution. But in practice, designing a network that simultaneously takes both observed data xx and latent variables \\(z\\) as inputs presents significant architectural challenges, making this approach less intuitive to implement. We consider use chain rule of probability again to decompose \\(p_\\theta(x,z)\\) into \\(p(z)p_\\theta(x|z)\\). Analogously, the \\(p_\\theta(x|z)\\) can be modeled as a decoder network. Now there’s the term of \\(p(z)\\) left. For the time being, we want the distribution to be of as much entropy as possible with fixed mean and variance. We’re now proving that with the definition of Shannon’s entropy, if there is constraints of given fixed mean . \\[\\mu = E[X]\\] and fixed variance . \\[\\sigma^2 = E[(X-\\mu)^2],\\] then it’s Gaussian distribution that maximizes \\(H(X)\\): . \\[p^*(x) = \\frac{1}{\\sqrt{2\\pi \\sigma^2}} e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}\\] The problem is essentially another constraint optimization problem to maximize differential entropy: . \\[h(X) = -\\int_{-\\infty}^{\\infty} p(x) \\log p(x) \\, dx\\] subject to: . \\[\\int_{-\\infty}^{\\infty}p(x)dx = 1 \\quad\\text{(Normalization)},\\] \\[\\int_{-\\infty}^{\\infty} x p(x)dx = \\mu \\quad \\text{(Mean)},\\] and . \\[\\int_{-\\infty}^{\\infty} (x-\\mu)^2 p(x)dx = \\sigma^2 \\quad \\text{(Variance)}\\] Now the Lagrangian functional is: . \\[\\begin{align*} \\mathcal{L}[p] = &amp;- \\int p(x) \\log p(x) \\, dx \\\\ &amp;+ \\lambda_1 \\left( \\int p(x) \\, dx - 1 \\right) \\\\ &amp;+ \\lambda_2 \\left( \\int x p(x) \\, dx - \\mu \\right) \\\\ &amp;+ \\lambda_3 \\left( \\int (x-\\mu)^2 p(x) \\, dx - \\sigma^2 \\right) \\end{align*}\\] As for a general functional of the form . \\[F[p] = \\int f(x, p(x), p'(x)) \\, dx，\\] the functional derivative is given by: . \\[\\frac{\\delta F}{\\delta p(y)} = \\frac{\\partial f}{\\partial p}\\bigg|_{x=y} - \\frac{d}{dx}\\left(\\frac{\\partial f}{\\partial p'}\\right)\\bigg|_{x=y}.\\] Term by term, we calculate: . \\[\\frac{\\delta}{\\delta p}\\left(-\\int p(x)\\log p(x) \\, dx\\right) = -\\left(\\log p(x) + p(x)\\cdot\\frac{1}{p(x)}\\right) = -\\log p(x) - 1,\\] \\[\\frac{\\delta}{\\delta p}\\left(\\lambda_1 \\int p(x) \\, dx\\right) = \\lambda_1,\\] \\[\\frac{\\delta}{\\delta p}\\left(\\lambda_2 \\int x p(x) \\, dx\\right) = \\lambda_2 x ,\\] and . \\[\\frac{\\delta}{\\delta p}\\left(\\lambda_3 \\int (x-\\mu)^2 p(x) \\, dx\\right) = \\lambda_3 (x-\\mu)^2.\\] Combining all terms, and setting it to zero: . \\[\\begin{align*} \\frac{\\delta\\mathcal{L}}{\\delta p} = -\\log p(x) - 1 + \\lambda_1 + \\lambda_2 x + \\lambda_3 (x-\\mu)^2 &amp;= 0 \\\\ \\implies \\log p(x) &amp;= -1 + \\lambda_1 + \\lambda_2 x + \\lambda_3 (x-\\mu)^2 \\\\ p(x) &amp;= \\exp\\left(-1 + \\lambda_1 + \\lambda_2 x + \\lambda_3 (x-\\mu)^2\\right) \\end{align*}\\] The exponential form can now be rewritten as: . \\[p(x) = e^{\\lambda_1 - 1} \\cdot e^{\\lambda_2 x} \\cdot e^{\\lambda_3 (x-\\mu)^2}\\] After completing the square and enforcing the constraints, we find: . \\[\\begin{align*} \\lambda_3 &amp;= -\\frac{1}{2\\sigma^2} \\\\ \\lambda_2 &amp;= \\frac{\\mu}{\\sigma^2} \\\\ e^{\\lambda_1 - 1} &amp;= \\frac{1}{\\sqrt{2\\pi\\sigma^2}}e^{-\\frac{\\mu^2}{2\\sigma^2}} \\end{align*}\\] Substituting these back gives the Gaussian distribution: . \\[p(x) = \\frac{1}{\\sqrt{2\\pi\\sigma^2}} e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}\\] Among all distributions with a given mean and variance, the Gaussian has the highest entropy (i.e., it makes the fewest assumptions). This makes it a natural default choice when no additional structure is assumed. That dictates our prior to be . \\[p(z) \\sim \\mathcal{N}(\\mu, \\sigma^2).\\] To wrap up our second approach, the new way to estimate \\(p(x)\\) can be like this: . | sample one \\(z_i\\) (\\(i\\) being arbitrary integer as sampling index) from the variational posterior \\(q_\\phi(z|x)\\) by inputting one observed data \\(x_i\\) into the network. | one data point in true data dataset can be sampled more than one time. | with the \\(z_i\\), evaluate \\(p(x)\\) as \\(\\frac{p(z_i)p_\\theta(x|z_i)}{q_\\phi(z_i|x)}\\). | . An expectation (even approximated with a few samples) gives a smoother, more stable gradient, because averaging over multiple samples would reduce variance. So let there be multiple samples instead of only one, and average the sum of their values in the final \\(p(x)\\)’s, which is basically the idea of Monte Carlo estimating. Another concern is from \\(q_\\phi(z|x)\\): like all denominators, it is a headache for numerical computation. It may lead to high variance if that is a poor approximation of the true encoder, which is a source of numerical instability, notably when \\(q_\\phi(z|x) \\ll p(z)\\). In such circumstance, gradients during backpropagation can become extremely large (since gradients are inversely proportional to the denominator): e.g. for \\(f(x)=\\frac{1}{x}\\), the gradient with respect to \\(x\\) is: \\(\\frac{\\partial f}{\\partial x}=−\\frac{a}{x^2}​\\). One solution to solve the problem is to transform \\(p(x)\\) into \\(\\log p(x)\\). It won’t affect the finding of the right probability because the monotonicity of logarithm, and it moves denominator to the right of minus sign. Numerically speaking, additivity is better than multiplictivity. Thus, we have now . \\[\\log p(x)\\simeq\\mathbb{E}_{q_\\phi(z|x)}[\\log p(z) + \\log p_\\theta(x|z) - \\log q_\\phi(z|x)].\\] However, it should be noted that with the introduction of \\(\\theta\\) and \\(\\phi\\) as the modeling effort, the equation of \\(p(x)\\) doesn’t hold strictly. We should still depart from the strictly-holing chain rule of probability and see what’s the relationship between them two formulae: . \\[\\begin{aligned} \\log p(x) &amp;=\\log p(x)\\int{q_\\phi(z|x)dz} \\quad \\text{Introduce modeled sampler. Global Integral of probability is 1.}\\\\ &amp;=\\int{\\log p(x)q_\\phi(z|x)dz} \\quad p(x)\\text{functions on x, resembling a constant for the integral about z.}\\\\ &amp;=\\mathbb{E}_{q_\\phi(z|x)}[\\log p(x)] \\quad \\text{Definition of expectation.}\\\\ &amp;=\\mathbb{E}_{q_\\phi(z|x)}[\\log \\frac{p(z)p(x|z)}{p(z|x)}]\\quad \\text{Chain rule of probability.} \\\\ &amp;=\\mathbb{E}_{q_\\phi(z|x)}[\\log p(z) + \\log p(x|z) - \\log p(z|x)]\\quad \\text{Split summation.} \\end{aligned}\\] You can see each one of deduction is simple up there. The sampler \\(q_\\phi(z|x)\\) can be seen as a conditional probability density function over \\(z\\) given \\(x\\). So far it is still holding strict as the true \\(\\log p(x)\\). Intuitively, we would like to replace \\(p(z|x)\\) with our modeled \\(q(z|x)\\), which obviously brings the ‘cost’ in so doing: the deviation. In this case, we need to have a measure of calculating the distance between two distributions. The measuring result should be a nonzero number, and should be within the range of 0 to 1 for two normalized distributions to be compared. There, here comes a second deus ex machina invocation: KL divergence, taking form of: . \\[D_{KL}(P||Q)=\\mathbb{E}_P[\\log \\frac{P(x)}{Q(x)}]=\\mathbb{E}_P[\\log P(x) -\\log Q(x)].\\] which is originally used to measure the difference between two distributions \\(P\\) and \\(Q\\) in the formula) across all values of the concerned variables. Its most important feature is it is never goes negative, which provides quantitative relationship between the true and simulated \\(\\log p(x)\\). This is ensured by logarithm’s concavity (i.e. Jensen’s inequality): . \\[D_{KL}(P||Q)=\\mathbb{E}_P[\\log \\frac{P}{Q}] \\geq -\\log \\mathbb{E}_P[\\frac{Q}{P}]=-\\log \\int P(x)\\frac{Q(x)}{P(x)}dx =-\\log\\int Q(x)dx = -\\log(1)=0\\] thanks to . \\[\\log⁡(\\sum_i\\lambda _ix_i)\\geq\\sum_i\\lambda_i\\log⁡(x_i).\\] For a convex combination \\(\\sum_i\\lambda_i=1\\) and \\(\\lambda_i\\geq0\\), and the equality of \\(D_{KL}(P||Q)\\) holds only if \\(P=Q\\). It can be understood by thinking of the secant line lies below the curve for logarithm function. In fact, . \\[D_{KL}(P || Q)=H(P,Q)-H(P).\\] like the gap between \\(H(P,Q)\\) vs. \\(H(P)\\). And, given the unabandoned \\(\\log\\), we come to notice that there is a asymmetry in \\(D_{KL}\\): . \\[D_{KL}(P||Q) \\neq D_{KL}(Q||P)\\] So, \\(D_{KL}(P||Q)\\) ignores regions where \\(Q(x)&gt;P(x)\\) if \\(P(x)\\approx 0\\), due to the weight \\(P\\). Observe the simulated \\(\\log p(x)\\) again, we find that the sampler under expectation notation can form a \\(D_{KL}\\) with \\(p(z|x)\\). \\[\\begin{aligned} &amp; \\mathbb{E}_{q_\\phi(z|x)}[\\log p(z) + \\log p(x|z) - \\log p(z|x)] \\\\ &amp;=\\mathbb{E}_{q_\\phi(z|x)}[\\log p(z) \\underbrace{- \\log q_\\phi(z|x) + \\log q_\\phi(z|x)}_{=0} + \\log p(x|z) - \\log p(z|x)] \\\\ &amp;=\\mathbb{E}_{q_\\phi(z|x)}[\\log p(z) - \\log q_\\phi(z|x) + \\log p(x|z) + (\\log q_\\phi(z|x) - \\log p(z|x))] \\quad\\text{Switch summation order.}\\\\ &amp;=\\mathbb{E}_{q_\\phi(z|x)}[\\log p(z) - \\log q_\\phi(z|x) + \\log p(x|z) ] + \\underbrace{\\mathbb{E}_{q_\\phi(z|x)}[\\log q_\\phi(z|x) - \\log p(z|x)]}_{i.e. D_{KL}(q_\\phi(z|x) || p(x|z))\\geq 0.} \\\\ &amp;\\geq \\mathbb{E}_{q_\\phi(z|x)}[\\log p(z) - \\log q_\\phi(z|x) + \\log p(x|z) ] \\equiv \\mathbb{E}_{q_\\phi(z|x)}[\\log \\frac{p(x,z)}{q_\\phi(z|x)}] \\end{aligned}\\] The last line of the equations is the expression of the so-called Evidence Lower Bound (ELBO). Most literature online prefers the form in tight fraction. The name Evidence comes again from the chain rule of probability: . \\[\\underbrace{p(x)}_{\\text{evidence}} = \\frac{ \\underbrace{p(x, z)}_{\\text{joint probability}} }{ \\underbrace{p(z|x)}_{\\text{posterior}} }.\\] We have developed the approaches of estimating the probability of the observed data and of comparing them with the true probability distribution in this framework all along. And . \\[\\log p(x) \\geq \\mathbb{E}_{q_\\phi(z|x)}[\\log p(z) - \\log q_\\phi(z|x) + \\log p(x|z) ] \\equiv \\mathbb{E}_{q_\\phi(z|x)}[\\log \\frac{p(x,z)}{q_\\phi(z|x)}]\\] gives the name to Lower Bound. We now use ELBO to be the measure so that the corresponding value of observing those \\(x\\) in modeled distributions can be lower than that in the true distribution just because the modeled distribution is not close to the true distribution. The inequality about ELBO holds with a true \\(p(x|z)\\) being known, which is actually never the case in real life. A straightforward method to get the true distribution is to guess all the possible distribution to see which one provides the highest ELBO, but this is surely unfeasible. ELBO is now completely practicable, except for the numerator \\(p(x,z)\\) that can be further decomposed as \\(p(z)p_\\theta(x|z)\\) where the \\(_\\theta\\) indicates the modeling effort in decoder. However, it should be noted that the decomposition brings in approximation error via the modeling \\(\\theta\\), so we have in effect: . \\[\\mathbb{E}_{q_\\phi(z|x)}[\\log \\frac{p(x,z)}{q_\\phi(z|x)}] \\sim \\mathbb{E}_{q_\\phi(z|x)}[\\log \\frac{p(z)p_\\theta(x|z)}{q_\\phi(z|x)}]\\] I put \\(\\sim\\) there instead of equal sign. People explore the hypothesizing structure of latents within the encoder-decoder methodology, hoping that by poking around the unknown universe of the mechanism of the true distribution of the observed data \\(x\\), some opportunities of improving tractability can be created in terms of modeling. That is what we will discuss in the next chapter. After all, we are relieved to know that our focus has by far transferred from the incomputable \\(\\log p(x)\\) to the promising proxy objective ELBO now. ",
    "url": "/A-Preliminary-Mathematical-Exegesis-of-Diffusion-Models/02-chpt2.html",
    
    "relUrl": "/02-chpt2.html"
  },"3": {
    "doc": "Cover Page",
    "title": "Cover Page",
    "content": "A preliminary mathematical exegesis of diffusion models -- Gaining Clarity From True Understanding . A PrgM2 (/pRˈɡem/2)'s work . [init]2025/06/16. Created vibe with jeykll and just-the-doc. Uploaded chapters 0, 1, and 2, as well as other stuff. ",
    "url": "/A-Preliminary-Mathematical-Exegesis-of-Diffusion-Models/",
    
    "relUrl": "/"
  },"4": {
    "doc": "About Author",
    "title": "About Author",
    "content": "Shuyue Wang, the author. Working on Artificial Intelligence. Currently living at Shanghai. Please send messages to him via: henri_w_91@hotmail.com . ",
    "url": "/A-Preliminary-Mathematical-Exegesis-of-Diffusion-Models/resume.html",
    
    "relUrl": "/resume.html"
  },"5": {
    "doc": "Buy me coffee(s) / become sponsor",
    "title": "Buy me coffee(s) / become sponsor",
    "content": "Please buy me coffee(s) or be my sponsor. Use Alipay to scan this: . Sponsor list (top 20 in sponsorship): . | Emzan Technology Ltd., Hong Kong SAR, China. | . ",
    "url": "/A-Preliminary-Mathematical-Exegesis-of-Diffusion-Models/sponsor.html",
    
    "relUrl": "/sponsor.html"
  }
}
